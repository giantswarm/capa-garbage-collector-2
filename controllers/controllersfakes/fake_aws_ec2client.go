// Code generated by counterfeiter. DO NOT EDIT.
package controllersfakes

import (
	"sync"

	"github.com/aws/aws-sdk-go/service/ec2"
	"github.com/giantswarm/capa-garbage-collector/controllers"
)

type FakeAwsEc2Client struct {
	DeleteSecurityGroupStub        func(*ec2.SecurityGroup) error
	deleteSecurityGroupMutex       sync.RWMutex
	deleteSecurityGroupArgsForCall []struct {
		arg1 *ec2.SecurityGroup
	}
	deleteSecurityGroupReturns struct {
		result1 error
	}
	deleteSecurityGroupReturnsOnCall map[int]struct {
		result1 error
	}
	GetNginxControllerSecGroupStub        func(string) (*ec2.SecurityGroup, error)
	getNginxControllerSecGroupMutex       sync.RWMutex
	getNginxControllerSecGroupArgsForCall []struct {
		arg1 string
	}
	getNginxControllerSecGroupReturns struct {
		result1 *ec2.SecurityGroup
		result2 error
	}
	getNginxControllerSecGroupReturnsOnCall map[int]struct {
		result1 *ec2.SecurityGroup
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAwsEc2Client) DeleteSecurityGroup(arg1 *ec2.SecurityGroup) error {
	fake.deleteSecurityGroupMutex.Lock()
	ret, specificReturn := fake.deleteSecurityGroupReturnsOnCall[len(fake.deleteSecurityGroupArgsForCall)]
	fake.deleteSecurityGroupArgsForCall = append(fake.deleteSecurityGroupArgsForCall, struct {
		arg1 *ec2.SecurityGroup
	}{arg1})
	stub := fake.DeleteSecurityGroupStub
	fakeReturns := fake.deleteSecurityGroupReturns
	fake.recordInvocation("DeleteSecurityGroup", []interface{}{arg1})
	fake.deleteSecurityGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAwsEc2Client) DeleteSecurityGroupCallCount() int {
	fake.deleteSecurityGroupMutex.RLock()
	defer fake.deleteSecurityGroupMutex.RUnlock()
	return len(fake.deleteSecurityGroupArgsForCall)
}

func (fake *FakeAwsEc2Client) DeleteSecurityGroupCalls(stub func(*ec2.SecurityGroup) error) {
	fake.deleteSecurityGroupMutex.Lock()
	defer fake.deleteSecurityGroupMutex.Unlock()
	fake.DeleteSecurityGroupStub = stub
}

func (fake *FakeAwsEc2Client) DeleteSecurityGroupArgsForCall(i int) *ec2.SecurityGroup {
	fake.deleteSecurityGroupMutex.RLock()
	defer fake.deleteSecurityGroupMutex.RUnlock()
	argsForCall := fake.deleteSecurityGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAwsEc2Client) DeleteSecurityGroupReturns(result1 error) {
	fake.deleteSecurityGroupMutex.Lock()
	defer fake.deleteSecurityGroupMutex.Unlock()
	fake.DeleteSecurityGroupStub = nil
	fake.deleteSecurityGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAwsEc2Client) DeleteSecurityGroupReturnsOnCall(i int, result1 error) {
	fake.deleteSecurityGroupMutex.Lock()
	defer fake.deleteSecurityGroupMutex.Unlock()
	fake.DeleteSecurityGroupStub = nil
	if fake.deleteSecurityGroupReturnsOnCall == nil {
		fake.deleteSecurityGroupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteSecurityGroupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAwsEc2Client) GetNginxControllerSecGroup(arg1 string) (*ec2.SecurityGroup, error) {
	fake.getNginxControllerSecGroupMutex.Lock()
	ret, specificReturn := fake.getNginxControllerSecGroupReturnsOnCall[len(fake.getNginxControllerSecGroupArgsForCall)]
	fake.getNginxControllerSecGroupArgsForCall = append(fake.getNginxControllerSecGroupArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetNginxControllerSecGroupStub
	fakeReturns := fake.getNginxControllerSecGroupReturns
	fake.recordInvocation("GetNginxControllerSecGroup", []interface{}{arg1})
	fake.getNginxControllerSecGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAwsEc2Client) GetNginxControllerSecGroupCallCount() int {
	fake.getNginxControllerSecGroupMutex.RLock()
	defer fake.getNginxControllerSecGroupMutex.RUnlock()
	return len(fake.getNginxControllerSecGroupArgsForCall)
}

func (fake *FakeAwsEc2Client) GetNginxControllerSecGroupCalls(stub func(string) (*ec2.SecurityGroup, error)) {
	fake.getNginxControllerSecGroupMutex.Lock()
	defer fake.getNginxControllerSecGroupMutex.Unlock()
	fake.GetNginxControllerSecGroupStub = stub
}

func (fake *FakeAwsEc2Client) GetNginxControllerSecGroupArgsForCall(i int) string {
	fake.getNginxControllerSecGroupMutex.RLock()
	defer fake.getNginxControllerSecGroupMutex.RUnlock()
	argsForCall := fake.getNginxControllerSecGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAwsEc2Client) GetNginxControllerSecGroupReturns(result1 *ec2.SecurityGroup, result2 error) {
	fake.getNginxControllerSecGroupMutex.Lock()
	defer fake.getNginxControllerSecGroupMutex.Unlock()
	fake.GetNginxControllerSecGroupStub = nil
	fake.getNginxControllerSecGroupReturns = struct {
		result1 *ec2.SecurityGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeAwsEc2Client) GetNginxControllerSecGroupReturnsOnCall(i int, result1 *ec2.SecurityGroup, result2 error) {
	fake.getNginxControllerSecGroupMutex.Lock()
	defer fake.getNginxControllerSecGroupMutex.Unlock()
	fake.GetNginxControllerSecGroupStub = nil
	if fake.getNginxControllerSecGroupReturnsOnCall == nil {
		fake.getNginxControllerSecGroupReturnsOnCall = make(map[int]struct {
			result1 *ec2.SecurityGroup
			result2 error
		})
	}
	fake.getNginxControllerSecGroupReturnsOnCall[i] = struct {
		result1 *ec2.SecurityGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeAwsEc2Client) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteSecurityGroupMutex.RLock()
	defer fake.deleteSecurityGroupMutex.RUnlock()
	fake.getNginxControllerSecGroupMutex.RLock()
	defer fake.getNginxControllerSecGroupMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAwsEc2Client) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ controllers.AwsEc2Client = new(FakeAwsEc2Client)
