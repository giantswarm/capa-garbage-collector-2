// Code generated by counterfeiter. DO NOT EDIT.
package controllersfakes

import (
	"context"
	"sync"

	"github.com/giantswarm/capa-garbage-collector/controllers"
	"k8s.io/apimachinery/pkg/types"
	"sigs.k8s.io/cluster-api-provider-aws/api/v1beta1"
	v1beta1a "sigs.k8s.io/cluster-api/api/v1beta1"
)

type FakeAwsClusterClient struct {
	GetStub        func(context.Context, types.NamespacedName) (*v1beta1.AWSCluster, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
		arg2 types.NamespacedName
	}
	getReturns struct {
		result1 *v1beta1.AWSCluster
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *v1beta1.AWSCluster
		result2 error
	}
	GetOwnerClusterStub        func(context.Context, *v1beta1.AWSCluster) (*v1beta1a.Cluster, error)
	getOwnerClusterMutex       sync.RWMutex
	getOwnerClusterArgsForCall []struct {
		arg1 context.Context
		arg2 *v1beta1.AWSCluster
	}
	getOwnerClusterReturns struct {
		result1 *v1beta1a.Cluster
		result2 error
	}
	getOwnerClusterReturnsOnCall map[int]struct {
		result1 *v1beta1a.Cluster
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAwsClusterClient) Get(arg1 context.Context, arg2 types.NamespacedName) (*v1beta1.AWSCluster, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
		arg2 types.NamespacedName
	}{arg1, arg2})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1, arg2})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAwsClusterClient) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeAwsClusterClient) GetCalls(stub func(context.Context, types.NamespacedName) (*v1beta1.AWSCluster, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeAwsClusterClient) GetArgsForCall(i int) (context.Context, types.NamespacedName) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAwsClusterClient) GetReturns(result1 *v1beta1.AWSCluster, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *v1beta1.AWSCluster
		result2 error
	}{result1, result2}
}

func (fake *FakeAwsClusterClient) GetReturnsOnCall(i int, result1 *v1beta1.AWSCluster, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *v1beta1.AWSCluster
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *v1beta1.AWSCluster
		result2 error
	}{result1, result2}
}

func (fake *FakeAwsClusterClient) GetOwnerCluster(arg1 context.Context, arg2 *v1beta1.AWSCluster) (*v1beta1a.Cluster, error) {
	fake.getOwnerClusterMutex.Lock()
	ret, specificReturn := fake.getOwnerClusterReturnsOnCall[len(fake.getOwnerClusterArgsForCall)]
	fake.getOwnerClusterArgsForCall = append(fake.getOwnerClusterArgsForCall, struct {
		arg1 context.Context
		arg2 *v1beta1.AWSCluster
	}{arg1, arg2})
	stub := fake.GetOwnerClusterStub
	fakeReturns := fake.getOwnerClusterReturns
	fake.recordInvocation("GetOwnerCluster", []interface{}{arg1, arg2})
	fake.getOwnerClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAwsClusterClient) GetOwnerClusterCallCount() int {
	fake.getOwnerClusterMutex.RLock()
	defer fake.getOwnerClusterMutex.RUnlock()
	return len(fake.getOwnerClusterArgsForCall)
}

func (fake *FakeAwsClusterClient) GetOwnerClusterCalls(stub func(context.Context, *v1beta1.AWSCluster) (*v1beta1a.Cluster, error)) {
	fake.getOwnerClusterMutex.Lock()
	defer fake.getOwnerClusterMutex.Unlock()
	fake.GetOwnerClusterStub = stub
}

func (fake *FakeAwsClusterClient) GetOwnerClusterArgsForCall(i int) (context.Context, *v1beta1.AWSCluster) {
	fake.getOwnerClusterMutex.RLock()
	defer fake.getOwnerClusterMutex.RUnlock()
	argsForCall := fake.getOwnerClusterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAwsClusterClient) GetOwnerClusterReturns(result1 *v1beta1a.Cluster, result2 error) {
	fake.getOwnerClusterMutex.Lock()
	defer fake.getOwnerClusterMutex.Unlock()
	fake.GetOwnerClusterStub = nil
	fake.getOwnerClusterReturns = struct {
		result1 *v1beta1a.Cluster
		result2 error
	}{result1, result2}
}

func (fake *FakeAwsClusterClient) GetOwnerClusterReturnsOnCall(i int, result1 *v1beta1a.Cluster, result2 error) {
	fake.getOwnerClusterMutex.Lock()
	defer fake.getOwnerClusterMutex.Unlock()
	fake.GetOwnerClusterStub = nil
	if fake.getOwnerClusterReturnsOnCall == nil {
		fake.getOwnerClusterReturnsOnCall = make(map[int]struct {
			result1 *v1beta1a.Cluster
			result2 error
		})
	}
	fake.getOwnerClusterReturnsOnCall[i] = struct {
		result1 *v1beta1a.Cluster
		result2 error
	}{result1, result2}
}

func (fake *FakeAwsClusterClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.getOwnerClusterMutex.RLock()
	defer fake.getOwnerClusterMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAwsClusterClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ controllers.AwsClusterClient = new(FakeAwsClusterClient)
